Назначение


Паттерн Factory Method – предоставляет абстрактный интерфейс (набор методов) для создания объекта-продукта, но оставляет возможность, 
разработчикам классов, реализующих этот интерфейс самостоятельно принять решение о том, экземпляр какого конкретного класса-продукта 
создать. Паттерн Factory Method позволяет базовым абстрактным классам передать ответственность за создание объектов-продуктов 
своим производным классам.



Применимость паттерна


Паттерн Фабричный Метод рекомендуется использовать, когда:

 Абстрактному базовому классу Creator заранее неизвестно, экземпляры каких конкретных классов-продуктов потребуется создать.

 Абстрактный класс Creator спроектирован таким образом, чтобы объекты-продукты, которые потребуется создать, описывались производными 
от него классами (ConcreteCreator).

 Процесс создания продукта должен обеспечивать возможность получения различных вариаций создаваемого продукта.

 Абстрактный класс Creator планирует передать ответственность за создание объектов-продуктов одному из своих подклассов.

 Требуется собрать в одном месте (в группе наследников) всех ConcreteCreators ответственных за создание объектов-продуктов определенного типа.



Результаты


Использование фабричных методов избавляет от необходимости использования конструкторов экземпляров для 
создания объектов-продуктов непосредственно в месте использования этих объектов-продуктов. 
Таким образом имеется возможность работать с абстрактным интерфейсом класса Product, что 
в свою очередь позволяет работать с любыми продуктами конкретных классов ConcreteProduct производных от Product.



Реализация


Полезные приемы реализации паттерна Фабричный Метод:

 Три основных разновидности паттерна:

	1. Класс Creator является абстрактным и содержит только абстрактные фабричные методы. В этом случае требуется 
	создание производных классов в которых будет реализован абстрактный фабричный метод из базового класса.
	
	2. Класс Creator является конкретным классом и содержит реализацию фабричного метода по умолчанию. В этом случае 
	фабричный метод используется главным образом для повышения гибкости. Выполняется правило, которое требует создавать 
	объекты-продукты в фабричном методе, чтобы в производных классах была возможность заместить или переопределить способ 
	создания объектов-продуктов. Такой подход гарантирует, что производным классам будет предоставлена возможность порождения 
	объектов-продуктов требуемых классов.
	
	3. Класс Creator является абстрактным и содержит реализацию фабричного метода по умолчанию.

 Фабричные методы с параметрами.

Допускается создавать фабричные методы принимающие аргументы. Аргумент фабричного метода определяет вид создаваемого 
объекта-продукта. Переопределение фабричного метода с аргументами, позволит изменять и конфигурировать изготавливаемые продукты.
См. пример: \CBS implementations\003_FM_with_Argument

 Языково-зависимые особенности.

Разные языки программирования могут иметь в своем составе свои уникальные конструкции и техники, 
с использованием которых можно интересным образом выразить идеи использования паттерна – Фабричный Метод.
В языке C#, фабричные методы могут быть виртуальными или абстрактными (исключительно виртуальными). 
Нужно осторожно подходить к вызову виртуальных методов в конструкторе класса Creator.
Следует помнить, что в C# невозможно реализовать абстрактный метод базового абстрактного класса как виртуальный 
в производном классе. Абстрактные методы интерфейсов (interface) допустимо реализовывать как виртуальные. 
После переопределения (override) виртуального метода в производном классе ConcreteCreator, виртуальные 
методы базового класса Creator становятся недоступными для их вызова на экземпляре класса ConcreteCreator (неважно, 
было привидение к базовому типу или нет). Если виртуальный метод вызывается в конструкторе класса Creator, а 
переопределенный (override) метод в конструкторе ConcreteCreator, то при создании экземпляра класса ConcreteCreator, 
в первую очередь отработает конструктор базового класса Creator, в котором произойдет вызов переопределенного метода из 
производного класса, а невиртуальный метод базового класса Creator. 
В случае замещения виртуального метода такой эффект отсутствует.
См. пример: \CBS implementations\004_FM_in_Constructor

Обойти эту особенность возможно через использование функции доступа GetProduct, которая создает продукт по запросу, 
а с конструктора снять обязанность по созданию продуктов. Функция доступа возвращает продукт, но сперва проверяет 
его существование. Если продукт еще не создан, то функция доступа его создает (через вызов фабричного метода). 
Такую технику часто называют отложенной (или ленивой) инициализацией.
См. пример: \CBS implementations\005_FM_LazyInit

 Использование обобщений (Generics).

Иногда приходится создавать конкретные классы создателей ConcreteCreator производные от базового класса Creator 
только для того чтобы создавать объекты-продукты определенного вида. Чтобы изменить подход порождения продуктов, 
в языке C#, можно воспользоваться такими конструкциями языка, как обобщения (Generics). Для организации процесса 
порождения продукта можно использовать технику – Service Locator.
См. пример: \CBS implementations\006_ServiceLocator

При использовании обобщений (Generics), порождать несколько подклассов ConcreteCreator от класса Creator не потребуется, 
достаточно при создании экземпляра продукта в качестве параметра-типа фабричного метода CreateProduct указать желаемый 
тип порождаемого продукта.
См. пример: \CBS implementations\007_FM_Generic

 Соглашения об именовании.

На практике рекомендуется давать такие имена фабричным методам, чтобы можно было легко понять, что используется именно 
фабричный метод. Например, фабричный метод порождающий документы мог бы иметь имя CreateDocument, где в имя метода 
входит название производимого действия Create и название того Document что создается.